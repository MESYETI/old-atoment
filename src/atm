#!/usr/bin/env python3
print("MESYETI's Free Atoment Compiler")
print("Copyright (C) 2021	MESYETI")
def disclaimer():
	print("This program is free software: you can redistribute it and/or modify")
	print("it under the terms of the GNU General Public License as published by")
	print("the Free Software Foundation, either version 3 of the License, or")
	print("(at your option) any later version")
	print("\nThis program is distributed in the hope that it will be useful,")
	print("but WITHOUT ANY WARRANTY; without even the implied warranty of")
	print("MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the")
	print("GNU General Public License for more details.")
	print("\nYou should have received a copy of the GNU General Public License")
	print("along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n")
disclaimer()
import colorama
import sys
import os
from colorama import init
from colorama import Fore, Back, Style
init()
reduce = False
def arg(short,long):
	if short in sys.argv or long in sys.argv:
		return True

def error(problem):
	print(Fore.RED +"[E] " +Style.RESET_ALL +str(problem))
	exit()

	
def ok(string,important):
	if reduce == True and important == True or reduce == False:
			print(Fore.GREEN +"[OK] " +Style.RESET_ALL +str(string))

def debug(string):
	if arg("-d","--debug"):
		print(Fore.CYAN +"[DEBUG] " +Style.RESET_ALL +str(string))
def findDataType(data):
	if data[0] and data[-1] == '"':
		datatype = "str"
	elif data[0] and data[-1] != '"':
		try:
			d = int(data)
			datatype = "int"
		except:
			try:
				d = float(data)
				datatype = "float"
			except:
				if data == "true" or data == "false":
					datatype = "bool"
				else:
					datatype = "var"
	else:
		pass
	return datatype
global variables
variables = []	
def compile(code,of, ln):
	global variables
	def cerror(problem):
		error("Error at line " +str(ln + 1) +": " +str(code) +"\n " +str(problem))
	if code[-1] != ";" and not code[:2] == "//":
		error("Error at line " +str(ln + 1) +": " +str(code) +"\nCode does not end with ;")
	if len(code) == 0:
		return ""
	tmpreturn = ""
	# ints = [0,1,2,3,4,5,6,7,8,9]
	# floats = [".",0,1,2,3,4,5,6,7,8,9]
	# ^ unused stuff :P
	# 
	# Code: input Atoment code
	# of: Output Format
	# 
	# Read command and arguments
	cmdindex = code.find(":")
	command = code[:cmdindex]
	argstr = code[int(cmdindex + 1):]
	string = False
	args = []
	toadd = ""
	charcount = 0
	for char in argstr:
		# Seperate arguments into a list by commas only if that comma is not apart of a string
		if char == '"':
			if string == False:
				string = True
			else:
				string = False
		if char == "," and string == False:
			args.append(toadd)
			toadd = ""
		elif char == ";" and charcount == len(argstr) - 1 and string == False:
			args.append(toadd)
			toadd = ""
		else:
			toadd += char
		#print("char " +char +"\nstring " +str(string))
		#debug("Character count: " +str(charcount) +", " +argstr[-1] +", " +str(len(argstr)))
		charcount += 1
	debug("Length of arguments: " +str(len(args)))
	debug("Last letter: " +str(code[-1]))
	debug("Recognised command arguments: " +str(args) +".")
	debug("Testing for missing arguments..")
	if code[-1] != ";" and code[-2] != ":" and len(args) == 0:
		debug("Found missing arguments, appending")
		args.append(argstr)
		debug("New argument list: " +str(args))
	else:
		debug("None found.")	
	count = 0
	# Compile to Lithium
	if of == "lithium":
		if code[:2] == "//":
			debug("Ignored comment")
			return ""
		if command == "print":
			for arg in args:
				datatype = findDataType(arg)
				if datatype == "str" or datatype == "int" or datatype == "float" or datatype == "bool":
					tmpreturn += str("ps" +arg[1:-1].replace("!","\!") +"!")
				elif datatype == "var":
					tmpreturn += str("pv" +arg +"!")
				else:
					cerror("Unsupported data type in print: " +datatype)
		elif command == "set":
			if len(args) == 2:
				datatype = findDataType(args[0])
				if datatype == "var":
					if not str(args[0]) in variables:
						tmpreturn += "vc" +str(args[0]) +"!"
					tmpreturn += "vs" +str(args[0]) +"!" +str(args[1]) +"!"
				else:
					cerror("Unsupported datatype in set: " +datatype +"\nUse var datatype to put the name of the variable you want to set")
			else:
				cerror("Amount of arguments for set must be 2.")
		elif command == "input":
			if len(args) == 1:
				tmpreturn += "vi" +str(args[0]) +"!"
			else:
				cerror("Amount of arguments for input must be 1.")
		else:
			cerror("Unrecognised command: " +str(command))
	else:
		error("Unsupported output format.")
	debug("Code compiled as: " +str(tmpreturn))
	return tmpreturn

if len(sys.argv) == 1:
	# Usage help
	print(Fore.GREEN +"Atoment Compiler\n" +Style.RESET_ALL +"Usage: " +Fore.YELLOW +"atm file output (output argument)\n\n" +Fore.GREEN +"This compiler has SUPER COW POWERS!")
	print(Style.RESET_ALL)
	exit()
elif len(sys.argv) >= 3:
	# Config
	oc = None
	# For checking if output format is defined
	if arg("-r","--reduce"):
		reduce = True
		# Reduce compiler outputs to only important ones
	if arg("-l","--lithium"):
		oc = "lithium"
		ok("Set to compile to LithiumPC",False)
		# OC: Output Code
	elif arg("-m","--micromium"):
		ok("Set to compile to Micromium Legacy",False)
		oc = "micromium"
	elif arg("-s","--smc"):
		ok("Set to compile to Scratch Machine Code",False)
		oc = "smc"
	elif arg("-h","--help"):
		print(Fore.YELLOW +"Atoment Compiler\n" +Style.RESET_ALL +"Output format:\n-l --lithium Compile to LithiumPC\n-m --micromium Compile to Micromium Legacy\n-s --smc Compile to Scratch Machine Code")
	else:
		pass
	if oc is None:
		error("Output format is not defined")
	ok("Begin compile",True)
	with open(sys.argv[1]) as f:
		inputFile = f.read().splitlines()
	out = ""
	linec = 0
	for line in inputFile:
		if arg("-d","--debug"):
			debug("Working on line " +str(linec) +": " +str(line))
		out += compile(line,oc,linec)
		ok(str("Compiled line " +str(linec + 1) +"."),False)
		linec += 1
	ok("Compiled everything. Writing to the file",True)
	if not os.path.exists(sys.argv[2]):
		f = open(sys.argv[2], "x")
		f.close()
	f = open(sys.argv[2], "w")
	f.write(out)
	f.close()
	ok("Written.",True)
	
else:
	error("Not enough arguments, run again without arguments to view usage.")
 
