#!/usr/bin/env python3
import colorama
import sys
import os
from colorama import init
from colorama import Fore, Back, Style
init()
reduce = False
def arg(short,long):
	if short in sys.argv or long in sys.argv:
		return True

def error(problem):
	print(Fore.RED +"[E] " +Style.RESET_ALL +str(problem))
	exit()
	
def ok(string,important):
	if reduce == True and important == True or reduce == False:
			print(Fore.GREEN +"[OK] " +Style.RESET_ALL +str(string))
def findDataType(data):
	if data[0] and data[-1] == '"':
		datatype = "str"
	elif data[0] and data[-1] != '"':
		try:
			d = int(data)
			datatype = "int"
		except:
			try:
				d = float(data)
				datatype = "float"
			except:
				if data == "true" or data == "false":
					datatype = "boolean"
				else:
					datatype = "var"
	else:
		pass
	return datatype
variables = []	
def compile(code,of):
	tmpreturn = ""
	# ints = [0,1,2,3,4,5,6,7,8,9]
	# floats = [".",0,1,2,3,4,5,6,7,8,9]
	# ^ unused stuff :P
	# 
	# Code: input Atoment code
	# of: Output Format
	# 
	# Read command and arguments
	cmdindex = code.find(":")
	command = code[:cmdindex]
	argstr = code[cmdindex:]
	string = False
	args = []
	toadd = ""
	for char in argstr:
		if char == '"':
			if string == False:
				string = True
			else:
				string = False
		if char == "," and string == False:
			args.append(toadd)
			toadd = ""
		else:
			toadd += char
		print("char " +char +"\nstring " +str(string))
	print(args)
	count = 0
	for arg in args:
		args[count] = str(args[count]).replace("/c",",")
	# Compile to Lithium
	if of == "lithium":
		if command == "print":
			for arg in args:
				datatype = findDataType(arg)
				if datatype == "str":
					tmpreturn += str("ps" +arg.replace("!","\!") +"!")
				
	else:
		error("Unsupported output format.")
	print(tmpreturn)
	return tmpreturn

if len(sys.argv) == 1:
	# Usage help
	print(Fore.GREEN +"Atoment Compiler\n" +Style.RESET_ALL +"Usage: " +Fore.YELLOW +"./compile2 file output (output argument)")
	print(Style.RESET_ALL)
	exit()
elif len(sys.argv) >= 3:
	# Config
	oc = None
	# For checking if output format is defined
	if arg("-r","--reduce"):
		reduce = True
		# Reduce compiler outputs to only important ones
	elif arg("-l","--lithium"):
		oc = "lithium"
		ok("Set to compile to LithiumPC",False)
		# OC: Output Code
	elif arg("-m","--micromium"):
		ok("Set to compile to Micromium Legacy",False)
		oc = "micromium"
	elif arg("-s","--smc"):
		ok("Set to compile to Scratch Machine Code",False)
		oc = "smc"
	elif arg("-h","--help"):
		print(Fore.YELLOW +"Atoment Compiler\n" +Style.RESET_ALL +"Output format:\n-l --lithium Compile to LithiumPC\n-m --micromium Compile to Micromium Legacy\n-s --smc Compile to Scratch Machine Code")
	else:
		pass
	if oc is None:
		error("Output format is not defined")
	ok("Begin compile",True)
	with open(sys.argv[1]) as f:
		inputFile = f.read().splitlines()
	out = ""
	linec = 0
	for line in inputFile:
		out += compile(line,oc)
		ok(str("Compiled line " +str(linec + 1) +"."),False)
		linec += 1
	ok("Compiled everything. Writing to the file",False)
	if not os.path.exists(sys.argv[2]):
		f = open(sys.argv[2], "x")
		f.close()
	f = open(sys.argv[2], "w")
	f.write(out)
	f.close()
	ok("Written.",False)
	
else:
	error("Not enough arguments, run again without arguments to view usage.")
 
